# -*- coding: utf-8 -*-
"""heap and insertion sort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BqcQSQxfwL2X-fh9THQ0UbTCuzV8pSEW
"""

import time
import random
import matplotlib.pyplot as plt
import heapq
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
def heap_sort(arr):
    heapq.heapify(arr)
    sorted_arr = [heapq.heappop(arr) for _ in range(len(arr))]
    arr[:] = sorted_arr
list_sizes = [100, 500, 1000, 3000, 5000, 10000]
insertion_times = []
heap_times = []
for size in list_sizes:
    arr1 = [random.randint(0, 100000) for _ in range(size)]
    arr2 = arr1[:]
    if size <= 5000:
        start_time = time.time()
        insertion_sort(arr1)
        end_time = time.time()
        insertion_times.append(end_time - start_time)
    else:
        insertion_times.append(None)
    start_time = time.time()
    heap_sort(arr2)
    end_time = time.time()
    heap_times.append(end_time - start_time)
plt.plot(list_sizes[:len(insertion_times)], insertion_times, marker='o', linestyle='-', color='b', label='Insertion Sort')
plt.plot(list_sizes, heap_times, marker='s', linestyle='-', color='r', label='Heap Sort')
plt.xlabel("Number of Elements (n)")
plt.ylabel("Time Taken (seconds)")
plt.title("Insertion Sort vs Heap Sort Time Complexity")
plt.legend()
plt.grid(True)
plt.show()