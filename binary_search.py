# -*- coding: utf-8 -*-
"""binary search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BqcQSQxfwL2X-fh9THQ0UbTCuzV8pSEW
"""

import time
import random
import matplotlib.pyplot as plt
def binary_search(arr, target, left, right):
    if left > right:
        return -1
    mid = (left + right) // 2
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search(arr, target, mid + 1, right)
        return binary_search(arr, target, left, mid - 1)
list_sizes = [100, 500, 1000, 5000, 10000, 50000, 100000]
search_times = []
for size in list_sizes:
    arr = list(range(size))
    target = random.choice(arr)
    start_time = time.time()
    binary_search(arr, target, 0, len(arr) - 1)
    end_time = time.time()
    elapsed_time = end_time - start_time
    search_times.append(elapsed_time)
plt.plot(list_sizes, search_times, marker='o', linestyle='-', color='r')
plt.xlabel("Number of Elements (n)")
plt.ylabel("Time Taken (seconds)")
plt.title("Recursive Binary Search Time Complexity")
plt.grid(True)
plt.show()